Домашняя работа 3
дедлайн среда: 09.10.2024 23:59

Задание 1
На вход программы подается список чисел. Используя функции map, filter и reduce необходимо:

создать новый список, элементами которого будут числа из первого списка, возведенные в третью степень
из получившегося списка отобрать только четные элементы
найти произведение всех элементов получившегося в п.2 списка
Задание 2
Напишите функцию is_prime(n), которая принимает число n и возвращает True, если число простое, и False в противном случае.

Задание 3
Напишите функцию own_map (собственная реализация функции map), принимающую на вход список и функцию. Возвращать функция должна новый список, в котором каждый элемент переданного списка был обработан при помощи переданной функции.

Задание 4
Напишите функцию, которая читает текстовый файл и подсчитывает количество строк, слов и символов в файле. Программа должна также вернуть самое длинное слово в файле и его длину. На вход функции можно подавать название файла (будем считать что он находится в той же директории, что и скрипт), выход можно оформить словарем с соответствующими ключами.

Задание 5
Напишите функцию `merge_files , которая принимает список путей к текстовым файлам и возвращает одну строку, содержащую объединенное содержимое всех файлов. Также необходимо реализовать возможность записи в файл полученного объединения (сделать необходимо при помощи дополнительного входного параметра True/False, по умолчанию значение True, содержимое записывается в файл).

Задание 6 дополнительно
Необходимо реализовать простую структуру хеш-таблицы и методы работы с ней.

Хеш-таблица -- это структура данных позволяющая обеспечить равномерное распределение вносимых данных.
Основным способом поиска позиции для добавляемого элемента, это применение hash функции.
Hash функция -- это такая функция, которая позволяет получить целочисленное положительное значение (проще говоря индекс) для вставки значения в таблицу .
Если хеш функция подобрана плохо, то будут происходить коллизии (столкновения)
Коллизии -- когда хеш-функция генерирует одинаковый индекс для различных добавляемых элементов.
Существуют различные способы разрешения коллизий. В задаче стоит использовать односвязный список как структуру данных либо список как массив в питоне через квадратные скобки.
Хеш-таблицы бывают статическими и динамическими. В задаче лучше реализовывать динамический вариант хеш-таблицы
С помощью методов вставки прямого, квадратичного или линейного пробирования реализуют поиск места в хеш-таблицы для равномерного распределения добавляемого элемента с понижением уровня коллизий. В задаче лучше использовать метод прямого пробирования.

роль хеш-таблицы будет исполнять словарь
напишите функцию my_hash, которая будет принимать на вход строку, преобразовывать каждый символ в его юникод и склеивать (НЕ складывать) получившиеся значения. Функция должна возвращать остаток от деления получившегося из склеек юникодов число, на размерность вашей таблицы (например 256). Это будет индекс, куда будет помещена наша строка
Напишите функцию add_to_table, которая на входе будет получать словарь (хеш-таблицу), строку, которую необходимо добавить в таблицу и индекс, полученный в результате применения к строке функции my_hash. Функция должна возвращать словарь, где индексом будет полученный хеш, а значением - список строк, соответствующий данному индексу. В случае, если строка уже есть в таблице, ее добавлять не надо, необходимо вывести об этом предупреждение. Также, необходимо вывести уведомление о том, что строка добавлена в таблицу.
напишите функцию remove_from_table, которая на входе будет получать словарь (хеш-таблицу), строку, которую необходимо удалить из таблицы и индекс, полученный в результате применения к строке функции my_hash. Функция должна возвращать словарь с отсутствием в нем переданной строки. Убедитесь, что функция корректно обрабатывает варианты, когда в списке по найденому индексу нет переданной строки и когда в словаре нет переданного индекса.
Напишите функцию search_in_table, которая на входе будет получать словарь (хеш-таблицу), строку, которую необходимо найти в таблице и индекс, полученный в результате применения к строке функции my_hash. Функция должна возвращать False, если строка не найдена или ключ словаря и индекс в списке, где находится строка
Напишите консольный интерфейс для взаимодействия с таблицей: при запуске программы таблица должна заполняться различными строками. После этого с ней необходимо взаимодействовать: искать элементы, удалять их, добавлять новые и выводить полученную таблицу на экран (предложение сделать через while True и нажатия цифр по соответствующим командам: 1 - добавить, 2 - удалить и т.д)